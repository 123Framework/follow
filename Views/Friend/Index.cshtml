@{
    ViewData["Title"] = "Friends";
    Layout = "_Layout";
}

<h2 class="mb-3">Friends</h2>

<div class="row">
    <div class="col-md-6">
        <h4>Your friends</h4>

        <ul id="friendsList" class="list-group mb-4"></ul>
    </div>
    <div class="col-md-6">
        <h4>Requests</h4>
        <div class="d-flex gap-2">
            <input id="toUser" class="form-control" placeholder="Username..." />
            <button id="sendBtn" class="btn btn-primary">Send request</button>
        </div>
        <div class="row mt-3">
            <div class="col-md-6">
                <h5>Incoming</h5>
                <ul id="incomingList" class="list-group"></ul>
            </div>
            <div class="col-md-6">
                <h5>Outgoing</h5>
                <ul id="outgoingList" class="list-group"></ul>
            </div>
        </div>
    </div>
</div>
@section Scripts {
   
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
                    (async () => {
            async function loadAll(){
                await Promise.all([loadFriends(), loadPending()]);
            }

            async function loadFriends(){
                try{
                    const res = await fetch('/friends/api/list');
                    if (!res.ok) { console.error('friends/list', res.status, await res.text()); return; }
                    const data = await res.json();

                    const ul = document.getElementById('friendsList');
                    ul.innerHTML = '';
                    (data.friends || []).forEach(u =>{
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        li.textContent = u;

                        const btn = document.createElement('button');
                        btn.className = 'btn btn-sm btn-outline-danger';
                        btn.textContent = 'Remove';
                        btn.onclick = async () =>{
                            if (confirm(`Remove ${u} from friends?`)) {
                                const r = await fetch('/friends/api/'+ encodeURIComponent(u), { method:'DELETE' });
                                if (!r.ok) alert(await r.text());
                                await loadAll();
                            }
                        };

                        li.appendChild(btn);
                        ul.appendChild(li);
                    });
                } catch(e){ console.error('friends load error', e); }
            }

            async function loadPending(){
                try{
                    const res = await fetch('/friends/api/pending');
                    if (!res.ok) { console.error('friends/pending', res.status, await res.text()); return; }
                    const data = await res.json();

                    const incoming = document.getElementById('incomingList');
                    const outgoing = document.getElementById('outgoingList');
                    incoming.innerHTML = '';
                    outgoing.innerHTML = '';

                    (data.incoming || []).forEach(u =>{
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        li.textContent = u;

                        const group = document.createElement('div');

                        const acceptBtn = document.createElement('button');
                        acceptBtn.className = 'btn btn-sm btn-success me-2';
                        acceptBtn.textContent = 'Accept';
                        acceptBtn.onclick = async () => {
                            const r = await fetch('/friends/api/accept',{
                                method: 'POST',
                                headers: {'Content-Type':'application/json'},
                                body: JSON.stringify({ withUserName: u })
                            });
                            if (!r.ok) alert(await r.text());
                            await loadAll();
                        };

                        const declineBtn = document.createElement('button');
                        declineBtn.className = 'btn btn-sm btn-outline-secondary';
                        declineBtn.textContent = 'Decline';
                        declineBtn.onclick = async () =>{
                            const r = await fetch('/friends/api/decline',{
                                method: 'POST',
                                headers: {'Content-Type':'application/json'},
                                body: JSON.stringify({ withUserName: u })
                            });
                            if (!r.ok) alert(await r.text());
                            await loadAll();
                        };

                        group.appendChild(acceptBtn);
                        group.appendChild(declineBtn);
                        li.appendChild(group);
                        incoming.appendChild(li);
                    });

                    (data.outgoing || []).forEach(u => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        li.textContent = u;

                        const cancelBtn = document.createElement('button');
                        cancelBtn.className = 'btn btn-sm btn-outline-danger';
                        cancelBtn.textContent = 'Cancel';
                        cancelBtn.onclick = async () => {
                            const r = await fetch('/friends/api/cancel', {
                                method: 'POST',
                                headers: {'Content-Type':'application/json'},
                                body: JSON.stringify({ withUserName: u })
                            });
                            if (!r.ok) alert(await r.text());
                            await loadAll();
                        };

                        li.appendChild(cancelBtn);
                        outgoing.appendChild(li);
                    });
                } catch(e){ console.error('pending load error', e); }
            }

            document.getElementById('sendBtn').addEventListener('click', async ()=>{
                const to = document.getElementById('toUser').value.trim();
                if(!to) return;

                const res = await fetch('/friends/api/request',{
                    method: 'POST',
                    headers: {'Content-Type':'application/json'},
                    body: JSON.stringify({ toUserName: to })
                });
                if(res.ok){
                    document.getElementById('toUser').value='';
                    await loadAll();
                } else {
                    const msg = await res.text();
                    alert(msg || 'Failed to send request');
                }
            });

            // SignalR
            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/chatHub')
                .withAutomaticReconnect()
                .build();

            connection.on('FriendListUpdated', () => { loadAll().catch(console.error); });
            connection.onreconnecting(err => console.warn('SignalR reconnecting...', err));
            connection.onreconnected(() => loadAll().catch(console.error));
            connection.onclose(err => console.error('SignalR closed', err));

            async function start(){
                try{
                    await connection.start();
                    await loadAll();
                } catch(e){
                    console.error('SignalR start failed', e);
                    setTimeout(start, 2000);
                }
            }
            start();
        })();
    </script>
}
    </script>
